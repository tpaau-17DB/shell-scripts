#!/bin/bash

BOLD_WHITE="\033[1;37m"
BLUE="\033[34m"
YELLOW="\033[33m"
RED="\033[31m"
ESC="\033[0m"

info()
{
	if [[ "$2" == *"\\r"* ]]; then
        echo -en "\r\033[K"
    fi
	echo -e${3} "${2}${BOLD_WHITE}[${ESC}${BLUE}i${ESC}${BOLD_WHITE}]${ESC} ${1}" >&2
}

warning()
{
	if [[ "$2" == *"\\r"* ]]; then
        echo -en "\r\033[K"
    fi
	echo -e${3} "${2}${BOLD_WHITE}[${ESC}${YELLOW}W${ESC}${BOLD_WHITE}]${ESC} ${1}" >&2
}

error()
{
	if [[ "$2" == *"\\r"* ]]; then
        echo -en "\r\033[K"
    fi
	echo -e${3} "${2}${BOLD_WHITE}[${ESC}${RED}E${ESC}${BOLD_WHITE}]${ESC} ${1}" >&2
}

print_usage() {
  echo -e "\033[1mUsage:\033[0m \033[32mm3uexp [mode] [command] [args]\033[0m\n"

  echo -e "\033[1mModes:\033[0m"
  echo -e "  \033[36mexport\033[0m             Package playlists and audio files into a tarball"
  echo -e "    \033[35mcmus:<playlist>\033[0m  Use cmus playlists as the source\n"

  echo -e "  \033[36mimport\033[0m             Import data from a tarball"
  echo -e "    \033[35mcmus:<playlist>\033[0m  Import playlists into cmus\n"

  echo -e "  \033[36mcreate\033[0m             Create an M3U playlist from a list of paths\n"

  echo -e "\033[1mArgs:\033[0m"
  echo -e "  \033[33m-h\033[0m | \033[33m--help\033[0m        Show this help message"
  echo -e "  \033[36mt\033[0m | \033[36mthreads=<n>\033[0m    Set the number of CPU threads to use"
}

clean_tmp()
{
	info "Cleaning up..."
	rm -rf "$TMP_DIR/"
}

# Print a progress bar
progress_bar()
{
	local progress=$(( ($1 * 100 / $2 * 100) / 100 ))
	local done=$(( (progress * 4) / 10))
	local left=$(( 40 - done ))
    local fill=$(printf "%${done}s")
    local empty=$(printf "%${left}s")
	printf "\r[${3}/${4}] [${fill// /#}${empty// /-}] ${progress}%%" >&2
}

file_accessible()
{
	local file="$1"
	if [ -e "$file" ]; then
		if [[ -n "$file" ]]; then
			return 0
		else
			error "File '$file' is empty!" "\r"
		fi
	else
		return 2
	fi
	return 1
}

check_dependencies()
{
	info "Checking dependencies..." "" "n"
	local status=0

	for cmd in ffprobe grep awk head cut pwd cd ls cat date hostname basename dirname nproc pigz; do
        if ! command -v "$cmd" >/dev/null; then
			if [ $status -eq 0 ]; then
				error "\nmissing: $cmd"
			else
				error "missing: $cmd"
			fi
            status=1
        fi
    done

	if [ $status -eq 0 ]; then
		echo " ok"
	fi

	return $status
}

# Get a single m3u entry from path
get_m3u_entry() {
    local file="$1"
	local prepend="$2"
	
	file_accessible "$1"
	local status="$?"
	if [ $status -eq 2 ]; then
		return 1
	elif [ $status -ne 0 ]; then
		error "File not accessible!"
		return 1
	fi

	local out=$(ffprobe -v error -hide_banner -show_format "$file" 2>&1)
	status="$?"
    if [ $status -ne 0 ]; then
		if [[ "$out" == *"Invalid data found when processing input"* ]]; then
			warning "Likely not an audio file: '$file'                     " "\r"
			return 1
		fi
		error "Failed extracting some metadata from '$file'" "\r"
        return 1
	fi

    local title=$(echo "$out" | grep -v "Cover" | grep -i "title" | head -n 1 | cut -d: -f2- | awk '{$1=$1};1')
    local artist=$(echo "$out" | grep -i "artist" | head -n 1 | cut -d: -f2- | awk '{$1=$1};1')
    local genre=$(echo "$out" | grep -i "genre" | head -n 1 | cut -d: -f2- | awk '{$1=$1};1')

	if [[ -z "$title" ]]; then
		warning "Possibly missing title metadata in '$file'" "\r"
		title="Unknown"
	fi
	if [[ -z "$artist" ]]; then
		warning "Possibly missing artist metadata in '$file'" "\r"
		artist="Unknown"
	fi
	if [[ -z "$genre" ]]; then
		warning "Possibly missing genre metadata in '$file'" "\r"
		genre="Unknown"
	fi

    echo "#EXTLAB:$title"
    echo "#EXTART:$artist"
    echo "#EXTGEN:$genre"

	if [[ "$prepend" == "" ]]; then
		echo "$file"
	else
		echo "$prepend$(basename "$file")"
	fi
    return 0
}

# Get a m3u entries from a list of files
m3u_from_paths()
{
	local files="$1"
	local playlist_name="$2"
	local prepend="$3"

	info "Creating an m3u playlist from paths..." "\r"

	echo "#EXTM3U"
	echo "#PLAYLIST:$playlist_name"

	local i=1
	local max=$(echo "$files" | wc -l)
	echo -e "$files" | while IFS= read -r file; do
		get_m3u_entry "$file" "$prepend"
		progress_bar $i $max "1" "1"
		((i++))
	done
}

ensure_no_tmp()
{
	if [ -e "$TMP_DIR" ]; then
		warning "The tmp directory is present, likely because m3uexp did not exit cleanly last time."
		read -p "Do you want to clean tmp? [Y/n] " choice
		local choice="${choice:-Y}"
		case "$choice" in
			[Yy]* )
				clean_tmp
			;; [Nn]* )
				info "ok."
			;; * )
				error "Invalid input. Please answer with 'y' or 'n'."
				exit 1
			;;
		esac
	fi
}

set -o pipefail

CMUS_PLAYLISTS="$HOME/.config/cmus/playlists"
TMP_DIR="$HOME/.m3uexp"
EXPORT_NAME="cmus-export-$(date +"%d-%m-%Y")-$(hostname)"

MODE=""
COMMAND=""
SELECT=""

THREADS=$(nproc)

command_next=false
for arg in "$@"; do
	if [[ $command_next == false ]]; then
		case $arg in
			export|import)
				MODE="$arg"
				command_next=true
				;;
			t=*|threads=*)
				THREADS="${arg#*=}"
				;;
			-h|--help)
				print_usage
				exit 0
				;;
			*)
				error "Unknown argument: '$arg'\n"
				print_usage
				exit 1
				;;
		esac
	else
		case $arg in
			cmus*)
				IFS=':' read -r command select <<< "$arg"
				COMMAND="$command"
				SELECT="$select"
				if [ -z $SELECT ]; then
					error "Expected playlist name after 'cmus:'\n"
					print_usage
					exit 1
				fi
				;;
			*)
				error "Unknown mode for '$MODE': $arg"
				print_usage
				exit 1
				;;
		esac
		command_next=false
	fi
done

if [[ -z $MODE ]]; then
	error "Expected mode!\n"
	print_usage
	exit 1
elif [[ -z $COMMAND ]]; then
	error "Expected command after '$MODE'!\n"
	print_usage
	exit 1
fi

check_dependencies
if [ $? -ne 0 ]; then
	error "Some dependency checks have failed!"
    exit 1
fi

ensure_no_tmp

if [[ $MODE == "export" ]]; then
	if [[ $COMMAND == "cmus" ]]; then
		if [ $SELECT == "all" ]; then
			info "Exporting cmus playlists..."
			info "Creating a temporary directory $TMP_DIR/"

			target="$TMP_DIR/$EXPORT_NAME"
			mkdir -p "$target/"

			previous_wd=$(pwd)
			cd "$target"

			playlists=$(ls "$CMUS_PLAYLISTS/")

			iter=1
			playlist_count=$(echo "$playlists" | wc -l)
			echo -e "$playlists" | while IFS= read -r playlist; do
				file_accessible "$CMUS_PLAYLISTS/$playlist"
				if [ $? -eq 0 ]; then
					songs=$(cat "$CMUS_PLAYLISTS/$playlist")

					info "Creating an m3u playlist from paths..." "\r"

					echo "#EXTM3U" > "$playlist.m3u" 
					echo "#PLAYLIST:$playlist" >> "$playlist.m3u"

					subiter=1
					song_count=$(echo "$songs" | wc -l)
					echo -e "$songs" | while IFS= read -r song; do
						base_dir=$(basename $(dirname "$song"))
						mkdir -p "$base_dir"
						cp "$song" "$base_dir"
						get_m3u_entry "$song" "$base_dir/" >> "$playlist.m3u"
						progress_bar $subiter $song_count $iter $playlist_count
						((subiter++))
					done
				fi
				((iter++))
			done
			echo ""
			info "Packing up..."
			cd ..
			tar cf - "$EXPORT_NAME" | pigz -p${THREADS} > "$previous_wd/$EXPORT_NAME.tar.gz"
			info "Exported as '$EXPORT_NAME.tar.gz'"
			clean_tmp
		else
			playlist="$CMUS_PLAYLISTS/$SELECT"
			if [[ -e "$playlist" ]]; then
				file_accessible "$playlist"
				if [ $? -eq 0 ]; then
					files=$(cat "$playlist")
					m3u_from_paths "$files" "$SELECT" > "$SELECT.m3u"
				else
					error "Playlist not accessible: '$playlist'"
					exit 1
				fi
			else
				error "Playlist does not exist: '$playlist'"
				info "Please select one of the following:"
				ls "$CMUS_PLAYLISTS"
				exit 1
			fi
		fi
	else
		error "Unknown command '$COMMAND' for $MODE\n"
		print_usage
		exit 1
	fi
elif [[ $MODE == "import" ]]; then
	if [[ $COMMAND == "cmus" ]]; then
		info "'$MODE $COMMAND' is currently a WIP"
	else
		error "Unknown command for '$MODE'\n"
		print_usage
		exit 1
	fi
elif [[ $MODE == "create" ]]; then
	playlist_name=$(basename "$PWD")
	paths=""
	info "Reading from stdin..."
	while read file; do
		paths+="$file"$'\n'
	done

	m3u_from_paths "$paths" "$playlist_name" > "$playlist_name.m3u"
else
	error "Unknown mode!\n"
	print_usage
	exit 1
fi
